"use client";
import React from "react";
import { connect, ConnectedProps } from "react-redux";
import { RootState } from "../../../store/reducer";
import { getJournals, upsertJournal } from "../state/actions";
import EditJournalLoading from "./components/EditJournalLoading";
import JournalEditor from "./components/EditJournal";
import { OutputData } from "@editorjs/editorjs";
import { useRouter } from "next/navigation";

function mapStateToProps(state: RootState) {
  return {
    journals: state.journals.journals,
    journalsLoading: state.journals.journalsLoading,
  };
}

const connector = connect(mapStateToProps, {
  getJournals,
  upsertJournal,
});
type PropsFromRedux = ConnectedProps<typeof connector>;

interface JournalEntry {
  id?: string;
  title: string;
  content: OutputData;
}

const EditJournalWrapper: React.FC<PropsFromRedux> = ({
  journals,
  journalsLoading,
  getJournals,
  upsertJournal,
}) => {
  const router = useRouter();

  React.useEffect(() => {
    if (!journals && !journalsLoading) getJournals();
  }, [journals, journalsLoading, getJournals]);

  const onSubmit = async (data: JournalEntry) => {
    try {
      console.log("Submitting journal entry:", data);
      
      // Ensure we have an ID (should be generated by EditJournal component)
      if (!data.id) {
        console.error("Journal entry missing ID");
        return;
      }

      // Call the upsert API
      await upsertJournal({
        id: data.id,
        title: data.title,
        content: data.content,
      });

      console.log("Journal saved successfully");
      
      // Redirect to journals list after successful save
      router.push("/journals");
    } catch (error) {
      console.error("Error saving journal:", error);
      // Error will be handled by the API layer and shown via toast
    }
  };

  if (journalsLoading) {
    return <EditJournalLoading />;
  } else {
    return (
      <JournalEditor
        onSubmit={onSubmit}
        onCancel={() => router.push("/journals")}
      />
    );
  }
};

export default connector(EditJournalWrapper);
